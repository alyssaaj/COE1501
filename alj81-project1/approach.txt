Alyssa Jordan
alj81@pitt.edu
9/24/19

I used a De La Briandais (DLB) trie data structure to keep track of a user's previously entered words. The DLB is made up of two linked lists. One goes to the "right" (aka the next Node in my program) and represents all the letters at the same level. The other linked list goes "down" (aka the down Node in my program) and represents the next level. Each level you go down is the next position in a word. I chose this approach even though the runtime of the DLB is O(Rw) where R is the radix size (in this case the alphabet as well as ASCII characters excluding the special case characters used in the code) and w is the number of levels you must go down. While the runtime of the R-way trie in the worst case is only O(w), the DLB is a good choice when the trie is sparse, meaning each level doesn't need the full radix and therefore, a lot of memory can be saved as you as you go further down the trie. Since this data structure will be filled with the users entered words, it's highly unlikely the user will enter even half of the words in the dictionary. Therefore, many radix will go unused, so it wouldn't make sense to use an R-way trie. In addition, the two linked lists allows us to traverse the list and go back up the tree when needed. This helps when making predictions.